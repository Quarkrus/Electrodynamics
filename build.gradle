buildscript {
    repositories {
		maven { url = 'https://maven.cil.li/' }
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
	  	maven {
	   	    name = "Progwml6 maven"
	   	    url = "https://dvs1.progwml6.com/files/maven/"
	  	}
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev'
        classpath 'codechicken:CodeChickenLib:1.7.10-1.1.3.136:dev'
        classpath 'codechicken:NotEnoughItems:1.7.10-1.0.4.107:dev'
    }
}

apply plugin: 'forge'

sourceSets {
    main {
        java {
            srcDirs = [
                "$projectDir/src/core",
                "$projectDir/src/api",
                "$projectDir/src/externalapi",
                "$projectDir/src/forcefields",
                "$projectDir/src/nuclear",
            ]
            include '**/*.java'
        }

        resources {
            srcDirs = [
                 "$projectDir/src/resources"
            ]
        }
    }
}
// define the properties file
ext.configFile = file "build.properties"
configFile.withReader {
	// read config.
	def prop = new Properties()
	prop.load(it)
	ext.config = new ConfigSlurper().parse prop
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim().toUpperCase()
}

version = "${config.minecraft_version}-${config.version_major}.${config.version_minor}.${config.version_revision}-${getGitHash()}"
group= "physica"
archivesBaseName = "PhysicaAll"
sourceCompatibility = 1.8
targetCompatibility = 1.8
libsDirName = "../output"
distsDirName = "../output"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
	
	replace "@VERSION@", project.version
    replaceIn "References.java"
}

repositories {
    maven {
        name = 'codechicken'
        url = 'https://maven.cil.li/'
    }
}

dependencies {
    compile 'codechicken:CodeChickenCore:1.7.10-1.0.4.35:dev'
    compile 'codechicken:CodeChickenLib:1.7.10-1.1.3.136:dev'
    compile 'codechicken:NotEnoughItems:1.7.10-1.0.4.107:dev'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task coreJar(type: Jar) {
    baseName = 'PhysicaCore'

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'physica/nuclear/**', 'physica/forcefield/**'
    }
}

task nuclearJar(type: Jar) {
    baseName = 'PhysicaNuclearPhysics'

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'physica/nuclear/**'
    }
}

task forcefieldJar(type: Jar) {
    baseName = 'PhysicaForcefield'

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'physica/forcefield/**'
    }
}

coreJar.dependsOn('reobf')
nuclearJar.dependsOn('reobf')
forcefieldJar.dependsOn('reobf')
task releaseJars(type: Copy) {
	dependsOn "reobf"
	from coreJar
	from nuclearJar
	from forcefieldJar
	destinationDir= new File('/releaseJarsOnly/')
}